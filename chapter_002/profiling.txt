Для анализа работы приложенния использовались утилиты jmap, jstat, а также сторонняя утлита VisualVM с плагином VisualGC

По графикам заполнения областей eden и tenured в VisualGC видно, что в текущем состоянии программы основной расход памяти
идёт на собственно инициализацию приложения (создание всех необходимых объектов), после чего в связи с тем,
что приложение в процессе работы создаёт не так много новых объектов, а в больше степени переиспользует уже существующие,
мы видим, что заполнение Eden в значительной степени замедляется. Также заполненность области Tenured во время полной сборки
мусора при запуске программы практически не изменяется в объёме, что говорит о том что программа в процессе работы практически
не создаёт долгоживужих объектов. Эмпирически удалось выяснить, что для работы программе при использовании SerialGC достаточно
4 мб оперативной памяти, однако в этом состоянии tenured область практически всегда полностью заполнена, соответственно во
избежание ситуации возникновения OutOfMemoryError (в случае слишком большого потока запросов) имеет смысл запускать программу
как минимум с 10 мб оперативной памяти. Также следут отметить, что на определённом этапе анализа пришлось отказаться от
VisualVM и перейти к использованию втроенных утилит jmap и jstat из-за слишком большого оверхеда по памяти, даваемого VisualVM.
При запуске программы с 3 мб оперативной памяти приложение начинает работать нестабильно и периодически выдаёт OutOfMemoryError.
используя jmap в таком случае мы видим, что все выделенные программе области памяти (как Eden, так и Tenured) полностью забиты,
что не даёт работать сборщику мусора.